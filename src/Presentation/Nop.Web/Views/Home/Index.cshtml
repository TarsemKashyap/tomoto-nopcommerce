@using Nop.Core.Domain.Seo
@inject SeoSettings seoSettings

@{
    Layout = "_ColumnsOne";

    //title
    if (!string.IsNullOrEmpty(seoSettings.HomepageTitle))
    {
        NopHtml.AddTitleParts(seoSettings.HomepageTitle);
    }

    //meta
    if (!string.IsNullOrEmpty(seoSettings.HomepageDescription))
    {
        NopHtml.AddMetaDescriptionParts(seoSettings.HomepageDescription);
    }

    //page class
    NopHtml.AppendPageCssClassParts("html-home-page");
}




<div class="page home-page">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageTop })
    <div class="page-body container">
        @*    @await Component.InvokeAsync("TopicBlock", new { systemName = "HomepageText" })*@
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeCategories })
        @await Component.InvokeAsync("HomepageCategories")
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeProducts })
        @await Component.InvokeAsync("HomepageProducts")
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeBestSellers })
        @await Component.InvokeAsync("HomepageBestSellers")
        @* @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforeNews })
        @await Component.InvokeAsync("HomepageNews")
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBeforePoll })
        @await Component.InvokeAsync("HomepagePolls")*@

        <div class="info-boxes-slider owl-carousel mb-3" data-owl-options="{
                        'items': 2,
                        'margin': 5,
                        'dots': false,
                        'loop': false,
                        'autoHeight': true,
                        'responsive': {
                            '576': {
                                'items': 2
                            },
                            '768': {
                                'items': 3
                            },
                            '1200': {
                                'items': 4
                            }
                        }
                    }">
            <div class="info-box bg-white info-box-icon-left">
                <i class="icon-shipping text-primary"></i>
                <div class="info-content">
                    <h4 class="ls-n-25">30 - 60 Min</h4>
                    <p class="font2 font-weight-light text-body ls-10">
                        Delivery Time
                    </p>
                </div>
            </div>
            <div class="info-box bg-white info-box-icon-left">
                <i class="icon-rupee text-primary"></i>
                <div class="info-content">
                    <h4 class="ls-n-25">Rs 30</h4>
                    <p class="font2 font-weight-light text-body ls-10">Delivery Fee</p>
                </div>
            </div>
            <div class="info-box bg-white info-box-icon-left">
                <i class="icon-shopping-bag text-primary"></i>
                <div class="info-content">
                    <h4 class="ls-n-25">Rs 99</h4>
                    <p class="font2 font-weight-light text-body ls-10">Minimum Order</p>
                </div>
            </div>
            <div class="info-box  bg-white info-box-icon-left">
                <i class="icon-secure-payment text-primary"></i>
                <div class="info-content">
                    <h4 class="ls-n-25">CARD & CASH</h4>
                    <p class="font2 font-weight-light text-body ls-10">Secure Payment</p>
                </div>
            </div>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HomepageBottom })
    </div>
</div>

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions
{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}


<script>


    let deliveryLocation4 = window.localStorage.getItem("addressName");

    if (!deliveryLocation4) {

        $(document).ready(function () {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                alert("Geolocation is not supported by this browser.");
            }



            var locations;
            function showPosition(position) {
                console.log(position);
                locations = position


                var itemLocality;
                var geocoder = new google.maps.Geocoder();
                var lat = position.coords.latitude;
                var lng = position.coords.longitude;


                //getting all the locations from data base to send these locations to check nearest products as per vendor
                $.ajax({

                    url: '/product/CheckServices/',
                    type: 'GET',

                    dataType: 'json',
                    success: function (result) {
                        callback(result);
                    },
                    error: function (request, message, error) {
                        handleException(request, message, error);
                    }
                });
                $.ajax({
                    headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },

                    type: "POST",
                    url: "/Home/SaveDeliveryLocation",
                    data: {
                        lat: lat, lng: lng

                    },
                    success: function (response) {
                    }
                });


                function calcDistance(p1, p2) {
                    return (google.maps.geometry.spherical.computeDistanceBetween(p1, p2) / 1000).toFixed(2);
                }
                var locationsAvaliable;
                var listOfLatLng = []
                function callback(response) {
                    locationsAvaliable = response;
                    console.log(locationsAvaliable);

                    if (locationsAvaliable != null) {
                        for (var i = 0; i < locationsAvaliable.length; i++) {
                            var p1 = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                            /*  console.log(p1);*/
                            var p2 = new google.maps.LatLng(locationsAvaliable[i].lat, locationsAvaliable[i].lng);
                            /* console.log(p2);*/
                            var distance = calcDistance(p1, p2) * 1000;
                            //console.log(distance);
                            //console.log(distance < 2000);
                            if (distance < 5000) {
                                var lats = locationsAvaliable[i].lat
                                var lngs = locationsAvaliable[i].lng
                                var vendorId = locationsAvaliable[i].vendorId
                                listOfLatLng.push({ lat: lats, lng: lngs, vendorId: vendorId });



                            }
                        }



                    }
                    dataCall(listOfLatLng)
                }




                var latlng = new google.maps.LatLng(lat, lng);
                geocoder.geocode({ latLng: latlng }, function (results, status) {

                    if (status == google.maps.GeocoderStatus.OK) {
                        if (results[1]) {
                            var arrAddress = results;
                            console.log(results);
                            $.each(arrAddress, function (i, address_component) {


                                if (address_component.types[0] == "locality") {
                                    console.log("City: " + address_component.address_components[0].long_name);
                                    itemLocality = address_component.address_components[0].long_name;
                                    document.getElementById("deliveryLocation").innerHTML = itemLocality;
                                    window.localStorage.setItem("currentLocation", JSON.stringify(itemLocality))
                                    console.log(itemLocality)



                                }
                            });
                        }
                    }
                })
            }


            var newData;
            function dataCall(response) {
                newData = response
                console.log(newData)

                $.ajax({
                    headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },

                    type: "POST",
                    url: "/Home/JsonObject",
                    data: {
                        newData: newData

                    },
                    success: function (response) {
                    }
                });




            }


        });
    }








</script>




<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBwIMGwxQ2A51mtWFM_w3AkxsFaj7E0RxQ&libraries=places&&libraries=geometry&callback=initMap"
        async defer></script>