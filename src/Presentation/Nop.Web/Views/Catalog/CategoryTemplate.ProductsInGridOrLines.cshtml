@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}
@*category breadcrumb*@
@section Breadcrumb
{
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="breadcrumb">
            <ul itemscope itemtype="http://schema.org/BreadcrumbList">
                <li>
                    <a href="@Url.RouteUrl("Homepage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                    <span class="delimiter">@breadcrumbDelimiter</span>
                </li>
                @{ int position = 1; }
                @foreach (var cat in Model.CategoryBreadcrumb)
                {
                    var isLastCategory = cat.Id == Model.Id;
                    <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                        @if (isLastCategory)
                        {
                            <strong class="current-item" itemprop="name">@cat.Name</strong>
                            <span itemprop="item" itemscope itemtype="http://schema.org/Thing"
                                  id="@Url.RouteUrl("Category", new {SeName = cat.SeName})">
                            </span>
                        }
                        else
                        {
                            <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name" itemprop="item">
                                <span itemprop="name">@cat.Name</span>
                            </a>
                            <span class="delimiter">@breadcrumbDelimiter</span>
                        }
                        <meta itemprop="position" content="@position" />
                    </li>
                    position++;
                }
            </ul>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
    }
}

@section CatalogFilters {
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
    @await Html.PartialAsync("_CatalogFilters", Model.CatalogProductsModel)
}

 

<div class="page category-page">
    <div class="page-title">
        <h1>@Model.Name</h1>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
        @*subcategories*@
  
        <script>

             var newObject = window.localStorage.getItem("newDataLatLng");

            var newparced = JSON.parse(newObject)
            console.log(newparced);
           

         
        </script>
      
        @if (Model.SubCategories.Count > 0)
        {
            <div id="eventGeo" class="category-grid sub-category-grid">
                <div class="item-grid">
                    @foreach (var item in Model.SubCategories)
                    {
                        
                        <div  class="item-box">
                            <div class="sub-category-item">
                                <h2 class="title">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName  })" title="@item.PictureModel.Title">
                                        @item.Name
                                    </a>
                                </h2>
                                <div class="picture">
                                    <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                        <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="product-grid featured-product-grid">
                <div class="title">
                    <strong>@T("Products.FeaturedProducts")</strong>
                </div>
                <div class="item-grid">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
        @await Html.PartialAsync("_CatalogSelectors", Model.CatalogProductsModel)
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })
        @{ 
            var catalogProductsViewData = new ViewDataDictionary(ViewData);
            catalogProductsViewData["fetchUrl"] = Html.Raw(Url.Action("GetCategoryProducts", "Catalog", new { categoryId = Model.Id }));
        }
        @await Html.PartialAsync("_CatalogProducts", Model.CatalogProductsModel, catalogProductsViewData)
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
    </div>
</div>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions
{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}
@*
      <script>




          $(document).ready(function () {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(showPosition);
  } else {
    alert("Geolocation is not supported by this browser.");
  }

 









  var locations;
  function showPosition(position) {
    console.log(position);
    locations = position


    var itemLocality;
    var geocoder = new google.maps.Geocoder();
    var lat = position.coords.latitude;
    var lng = position.coords.longitude;
   


    $.ajax({

      url: '/product/CheckServices/',
      type: 'GET',

      dataType: 'json',
      success: function (result) {
        callback(result);
      },
      error: function (request, message, error) {
        handleException(request, message, error);
      }
    });



    function calcDistance(p1, p2) {
      return (google.maps.geometry.spherical.computeDistanceBetween(p1, p2) / 1000).toFixed(2);
    }
    var locationsAvaliable;
    var listOfLatLng = []
    function callback(response) {
      locationsAvaliable = response;
      console.log(locationsAvaliable);

      if (locationsAvaliable != null) {
        for (var i = 0; i < locationsAvaliable.length; i++) {
          var p1 = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
          /*  console.log(p1);*/
          var p2 = new google.maps.LatLng(locationsAvaliable[i].lat, locationsAvaliable[i].lng);
          /* console.log(p2);*/
          var distance = calcDistance(p1, p2) * 1000;
          console.log(distance);
          console.log(distance < 2000);
          if (distance < 2000) {
            var lats = locationsAvaliable[i].lat
            var lngs = locationsAvaliable[i].lng
            var vendorId = locationsAvaliable[i].vendorId
            listOfLatLng.push({ lat: lats, lng: lngs, vendorId: vendorId });



          }
        }
        


      }
      dataCall(listOfLatLng)
    }




    var latlng = new google.maps.LatLng(lat, lng);
    geocoder.geocode({ latLng: latlng }, function (results, status) {

      if (status == google.maps.GeocoderStatus.OK) {
        if (results[1]) {
          var arrAddress = results;
          console.log(results);
          $.each(arrAddress, function (i, address_component) {
            if (address_component.types[0] == "locality") {
              console.log("City: " + address_component.address_components[0].long_name);
              itemLocality = address_component.address_components[0].long_name;
              //document.getElementById("CityName").value = itemLocality;
              console.log(itemLocality)

            }
          });
        }
      }
    })
  }


  var newDataLatLng;
  function dataCall(response) {
    newDataLatLng = response

            $("#eventGeo").click(function (evt) {
          
               

                $.ajax({
                    headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },

                    type: "POST",
                    url: "Catalog/CategoryPage",
                    data: { newDataLatLng: newDataLatLng, categoryId: "@Model.SubCategories.First().Id" },
                 


                    datatype: 'json',
                    success: function (response) {

                        if (response.success) {

                            alert("success")

                        }
                        

                    },
                    error: function (err) {
                        alert(err.statusText)
                    }
                });

                evt.preventDefault();
            });
    console.log(newDataLatLng)
  }

});
          </script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBwIMGwxQ2A51mtWFM_w3AkxsFaj7E0RxQ&libraries=places&&libraries=geometry&callback=initMap"
        async defer></script>*@

        

                       