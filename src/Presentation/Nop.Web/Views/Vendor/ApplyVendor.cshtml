@model ApplyVendorModel
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Vendors.Apply").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-apply-vendor-page");
}
<div class="page apply-vendor-page">
    <div class="page-title">
        <h1>@T("PageTitle.Vendors.Apply")</h1>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync("TopicBlock", new { systemName = "ApplyVendor" })
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ApplyVendorTop, additionalData = Model })
      @if (Model.DisableFormInput)
        {
            <div class="result">
                @Model.Result
            </div>
        }
        else
        {

        

       
            <form asp-route="ApplyVendorAccount" method="post" enctype="multipart/form-data">
                <div asp-validation-summary="ModelOnly" class="message-error"></div>
                <div class="fieldset">
                    <div class="form-fields">
                        <div class="inputs">
                            <label asp-for="Name" asp-postfix=":"></label>
                            <input asp-for="Name" class="name" placeholder="@T("Vendors.ApplyAccount.Name.Hint")"/>
                            <nop-required />
                            <span asp-validation-for="Name"></span>
                        </div>
                        <div class="inputs">
                            <label asp-for="Email" asp-postfix=":"></label>
                            <input asp-for="Email" class="name" placeholder="@T("Vendors.ApplyAccount.Email.Hint")"/>
                            <nop-required />
                            <span asp-validation-for="Email"></span>
                        </div>
                        <div class="inputs">
                            <label asp-for="Description" asp-postfix=":"></label>
                            <textarea asp-for="Description" class="description"></textarea>
                        </div>
                      
                        <div class="inputs">
                            
                            <input  asp-for="Lat" class="description"></input>
                        </div>
                        <div class="inputs">
                           
                            <input asp-for="Lng" class="description"></input>
                        </div>
                        <div class="inputs">
                            <label>@T("Vendors.ApplyAccount.Picture"):</label>
                            <input name="uploadedFile" type="file" accept="image/*"/>
                        </div>
                        @await Html.PartialAsync("_VendorAttributes", Model.VendorAttributes)
                        @if (Model.DisplayCaptcha)
                        {
                            <nop-captcha />
                        }
                        @if (Model.TermsOfServiceEnabled)
                        {
                            <script asp-location="Footer">
                                $(document).ready(function() {
                                    $('#apply-vendor').on('click', function() {
                                        if ($('#termsofservice').is(':checked')) {
                                            //do some stuff
                                            return true;
                                        } else {
                                            //just show validation errors, dont post
                                            alert('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Vendors.ApplyAccount.AcceptTermsOfService.Required").Text))');
                                            return false;
                                        }
                                    });
                                });
                            </script>
                            <div class="terms-of-service">
                                <input id="termsofservice" type="checkbox" name="termsofservice" />
                                <label for="termsofservice">@T("Vendors.ApplyAccount.AcceptTermsOfService")</label>
                                @if (Model.TermsOfServicePopup)
                                {
                                    <span class="read" id="read-acceptterms">@T("Vendors.ApplyAccount.AcceptTermsOfService.Read")</span>
                                    <script asp-location="Footer">
                                        $(document).ready(function() {
                                            $('#read-acceptterms').on('click',
                                                function (e) {
                                                    displayPopupContentFromUrl(
                                                        '@Url.RouteUrl("TopicPopup", new {SystemName = "VendorTermsOfService"})',
                                                        '@T("Vendors.ApplyAccount.AcceptTermsOfService")');
                                                });
                                        });
                                    </script>
                                }
                                else
                                {
                                    <a class="read" id="read-acceptterms" href="@Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("VendorTermsOfService") })">@T("Vendors.ApplyAccount.AcceptTermsOfService.Read")</a>
                                }
                            </div>
                        }
                    </div>
                </div>

                <input id="input" type="text" placeholder="Search for location" />
                <div style="height: 100px;" id="map1"></div>
<div id="infowindow-content">
    <span id="place-name" class="title"></span><br />
    <span id="place-address"></span>
</div>
                <div class="buttons">
                    <button type="submit" id="apply-vendor" name="apply-vendor" class="button-1 apply-vendor-button">@T("Vendors.ApplyAccount.Button")</button>
                </div>
            </form>
            }
       
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ApplyVendorBottom, additionalData = Model })
    </div>
</div>


<script>




    var TrPoly = function () {
        var poly;
        var map;
        var path;
        var markers = [];
        var polyPath = [];

        this.initMap = function (el) {
            map = new google.maps.Map(document.getElementById("map1"), {
                zoom: 7,
                center: { lat: 19.075983, lng: 72.877655 },
            });
            //ajx call for getting data

           




            var locationsAvaliable;
            function callback(response) {
                locationsAvaliable = response;
                //console.log(locationsAvaliable)
                //here we are having all data
                //const exsistLocations = locationsAvaliable;
                var exsistLocations = []
                if (locationsAvaliable != null) {
                    for (var i = 0; i < locationsAvaliable.length; i++) {
                        exsistLocations[i] = new google.maps.LatLng(locationsAvaliable[i].lat, locationsAvaliable[i].lng);
                    }
                }

                //console.log(exsistLocations)
                const mapDat = new google.maps.Polygon({ paths: exsistLocations });

                const input = document.getElementById("input");

                const options = {
                    // fields: ["formatted_address", "geometry", "name"],
                    // strictBounds: false,
                    // types: ["establishment"],
                };



                const autocomplete = new google.maps.places.Autocomplete(input, options);




                const infowindow = new google.maps.InfoWindow();
                const infowindowContent = document.getElementById("infowindow-content");

                infowindow.setContent(infowindowContent);

                const marker = new google.maps.Marker({
                    map,
                    anchorPoint: new google.maps.Point(0, -29),
                });

                autocomplete.addListener("place_changed", () => {
                    infowindow.close();
                    marker.setVisible(false);

                    var place = autocomplete.getPlace();





                    if (!place.geometry || !place.geometry.location) {
                        // User entered the name of a Place that was not suggested and
                        // pressed the Enter key, or the Place Details request failed.
                        window.alert("No details available for input: '" + place.name + "'");
                        return;
                    }

                    // If the place has a geometry, then present it on a map.
                    if (place.geometry.viewport) {
                        map.fitBounds(place.geometry.viewport);
                    } else {
                        map.setCenter(place.geometry.location);
                        map.setZoom(17);
                    }

                    marker.setPosition(place.geometry.location);
                    marker.setVisible(true);
                    infowindowContent.children["place-name"].textContent = place.name;
                    infowindowContent.children["place-address"].textContent = place.formatted_address;
                    infowindow.open(map, marker);

                    var lat = place.geometry.location.lat();
                    document.getElementById("Lat").value = lat;
                    var lng = place.geometry.location.lng();
                    document.getElementById("Lng").value = lng;

                    var latlng = new google.maps.LatLng(lat, lng);


                    if (google.maps.geometry.poly.containsLocation(latlng, mapDat) == true) {
                        document.getElementById("successMsg").innerHTML = "@T("Service is  Avaliable in this area")"
                        document.getElementById("successMsg").style.color = "green";

                        $('.buttonCart').attr('disabled', false);
                    }
                    else {
                        document.getElementById("successMsg").innerHTML = "@T("Service not  Avaliable in this area")"
                        document.getElementById("successMsg").style.color = "red";
                        $('.buttonCart').attr('disabled', true);

                    }




                    //var componentForm = {
                    //    locality: 'short_name',
                    //};
                    //for (var i = 0; i < place.address_components.length; i++) {
                    //    var addressType = place.address_components[i].types[0];
                    //    if (componentForm[addressType]) {
                    //        var val = place.address_components[i][componentForm[addressType]];
                    //        document.getElementById("CityName").value = val;

                    //    }
                    //    for (var j = 0; j < place.address_components[i].types.length; j++) {
                    //        if (place.address_components[i].types[j] == "postal_code") {
                    //            console.log(place.address_components[i]);
                    //            var postal = place.address_components[i].long_name;
                    //            document.getElementById("Pincode").value = postal;

                    //        }
                    //    }


                    //}



                });

                //use return_first variable here
            }

            callback();




















        }




    }

    var cc = new TrPoly;
    console.log(cc);
    cc.initMap('map1');

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBwIMGwxQ2A51mtWFM_w3AkxsFaj7E0RxQ&libraries=places&callback=initMap"
        async defer></script>