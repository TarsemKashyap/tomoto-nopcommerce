@* @model ProductDetailsModel
@inject Nop.Services.Catalog.IProductService _productService;

<div>



    <input id="input" type="text" placeholder="Enter a location" />




</div>*@




@*<div class="">
    <div class="form-group">

        <div class="col-md-9">
           <input asp-for="Latitude" id="Latitude" type="text" readonly />
                <input asp-for="Longitude" id="Longitude" type="text" readonly />
        </div>

    </div>
    <div class="form-group row">
        <div class="col-md-9 offset-md-3">
            <button type="button" id="checkLocation" class="btn btn-primary">@T("Check avaliablity")</button>
        </div>
    </div>
</div>*@

@*
<div style="height: 100px;" id="map1"></div>
<div id="infowindow-content">
    <span id="place-name" class="title"></span><br />
    <span id="place-address"></span>
</div>


   @inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

    @functions
    {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}*@

@*<script>




    var TrPoly = function() {
        var poly;
        var map;
        var path;
        var markers = [];
        var polyPath = [];

        this.initMap = function(el) {
            map = new google.maps.Map(document.getElementById("map1"), {
                zoom: 7,
                center: { lat: 19.075983, lng:72.877655},
            });
            //ajx call for getting data

            $.ajax({
                headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },
                url: '/product/CheckService/',
                type: 'POST',
                data: { vendorId: '@(Model.VendorId)' },
                dataType: 'json',
                success: function(result) {
                    callback(result);
                },
                error: function(request, message, error) {
                    handleException(request, message, error);
                }
            });




            var locationsAvaliable;
            function callback(response) {
                locationsAvaliable = response;
                //console.log(locationsAvaliable)
                //here we are having all data
                //const exsistLocations = locationsAvaliable;
                var exsistLocations = []
                if (locationsAvaliable != null) {
                    for (var i = 0; i < locationsAvaliable.length; i++) {
                        exsistLocations[i] = new google.maps.LatLng(locationsAvaliable[i].lat, locationsAvaliable[i].lng);
                    }
                }

                //console.log(exsistLocations)
                const mapDat = new google.maps.Polygon({ paths: exsistLocations });

                const input = document.getElementById("input");

                const options = {
                    // fields: ["formatted_address", "geometry", "name"],
                    // strictBounds: false,
                    // types: ["establishment"],
                };



                const autocomplete = new google.maps.places.Autocomplete(input, options);

              


                const infowindow = new google.maps.InfoWindow();
                const infowindowContent = document.getElementById("infowindow-content");

                infowindow.setContent(infowindowContent);

                const marker = new google.maps.Marker({
                    map,
                    anchorPoint: new google.maps.Point(0, -29),
                });

                autocomplete.addListener("place_changed", () => {
                    infowindow.close();
                    marker.setVisible(false);

                    var place = autocomplete.getPlace();





                    if (!place.geometry || !place.geometry.location) {
                        // User entered the name of a Place that was not suggested and
                        // pressed the Enter key, or the Place Details request failed.
                        window.alert("No details available for input: '" + place.name + "'");
                        return;
                    }

                    // If the place has a geometry, then present it on a map.
                    if (place.geometry.viewport) {
                        map.fitBounds(place.geometry.viewport);
                    } else {
                        map.setCenter(place.geometry.location);
                        map.setZoom(17);
                    }

                    marker.setPosition(place.geometry.location);
                    marker.setVisible(true);
                    infowindowContent.children["place-name"].textContent = place.name;
                    infowindowContent.children["place-address"].textContent = place.formatted_address;
                    infowindow.open(map, marker);

                    var lat = place.geometry.location.lat();
                    document.getElementById("Latitude").value = lat;
                    var lng = place.geometry.location.lng();
                    document.getElementById("Longitude").value = lng;

                    var latlng = new google.maps.LatLng(lat, lng);


                    if (google.maps.geometry.poly.containsLocation(latlng, mapDat) == true) {
                        document.getElementById("successMsg").innerHTML = "@T("Service is  Avaliable in this area")"
                        document.getElementById("successMsg").style.color = "green";

                        $('.buttonCart').attr('disabled', false);


                        $.ajax({
                            headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },

                            type: "POST",
                            url: "/Home/SaveDeliveryLocation",
                            data: {
                                lat:lat,lng:lng

                            },
                            success: function (response) {
                            }
                        });
                    }
                    else {
                        document.getElementById("successMsg").innerHTML = "@T("Service not  Avaliable in this area")"
                        document.getElementById("successMsg").style.color = "red";
                        $('.buttonCart').attr('disabled', true);

                    }




                    //var componentForm = {
                    //    locality: 'short_name',
                    //};
                    //for (var i = 0; i < place.address_components.length; i++) {
                    //    var addressType = place.address_components[i].types[0];
                    //    if (componentForm[addressType]) {
                    //        var val = place.address_components[i][componentForm[addressType]];
                    //        document.getElementById("CityName").value = val;

                    //    }
                    //    for (var j = 0; j < place.address_components[i].types.length; j++) {
                    //        if (place.address_components[i].types[j] == "postal_code") {
                    //            console.log(place.address_components[i]);
                    //            var postal = place.address_components[i].long_name;
                    //            document.getElementById("Pincode").value = postal;

                    //        }
                    //    }


                    //}



                });

                //use return_first variable here
            }

            callback();




















        }




    }

    var cc = new TrPoly;
    console.log(cc);
    cc.initMap('map1');

</script>*@

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBwIMGwxQ2A51mtWFM_w3AkxsFaj7E0RxQ&libraries=places&callback=initMap"
        async defer></script>







@*@{
    ViewBag.SuccesMessage = @T("Service is not Avaliable in this area");
    ViewBag.errorMessage = @T("Service is  in this area");
}*@
@*<script>

    //$("#btnCheck").click(function(evt) {
    //    var res = validate();
    //    if (res == false) {
    //        return false;
    //    }




    //    $.ajax({
    //        headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },



    //        type: "POST",
    //        url: "/Product/CheckService",
    //        data: {
    //            "lat": $("#Latitude").val(),

    //            "lng": $("#Longitude").val(),
    //            //"cityName": $("#CityName").val()
    //        },

    //        success: function(response) {

    //            if (response.success) {

    //                document.getElementById("successMsg").innerHTML = "@T("Service is Avaliable in this Area")"
    //                document.getElementById("successMsg").style.color = "green";
    //                $('.buttonCart').attr('disabled', false);

    //                //alert("Service is Avaliable")
    //            }
    //            else {
    //                document.getElementById("successMsg").innerHTML = "@T("Service is not Avaliable in this area")"
    //                document.getElementById("successMsg").style.color = "red";
    //                $('.buttonCart').attr('disabled', true);

    //                //alert("Service not avaliable in this area ")

    //            }

    //        },
    //        error: function(err) {
    //            alert(err.statusText)
    //        }
    //    });

    //    evt.preventDefault();
    //});




    jQuery(function($) {
        var input = $('#input');
        input.on('keydown', function() {
            var key = event.keyCode || event.charCode;

            if (key == 8 || key == 46)
                $('.buttonCart').attr('disabled', true);

        });
        $("#input").on("input", function() {
            $('.buttonCart').attr('disabled', true);
            document.getElementById("successMsg").innerHTML = "";
        });

    });





    function validate() {
        var isValid = true;

        var country = document.getElementById("input");
        if (country.value == 0) {
            document.getElementById("successMsg").innerHTML = "@T("Please enter address to check availability")";
            $('#successMsg').css('color', 'Red');
            isValid = false;
        }



        return isValid;
    }
</script>*@